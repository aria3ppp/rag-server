// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: rag/v1/rag.proto

package ragv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RAGService_Query_FullMethodName       = "/rag.v1.RAGService/Query"
	RAGService_QueryStream_FullMethodName = "/rag.v1.RAGService/QueryStream"
)

// RAGServiceClient is the client API for RAGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RAGServiceClient interface {
	Query(ctx context.Context, in *RAGServiceQueryRequest, opts ...grpc.CallOption) (*RAGServiceQueryResponse, error)
	QueryStream(ctx context.Context, in *RAGServiceQueryStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RAGServiceQueryStreamResponse], error)
}

type rAGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRAGServiceClient(cc grpc.ClientConnInterface) RAGServiceClient {
	return &rAGServiceClient{cc}
}

func (c *rAGServiceClient) Query(ctx context.Context, in *RAGServiceQueryRequest, opts ...grpc.CallOption) (*RAGServiceQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RAGServiceQueryResponse)
	err := c.cc.Invoke(ctx, RAGService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) QueryStream(ctx context.Context, in *RAGServiceQueryStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RAGServiceQueryStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RAGService_ServiceDesc.Streams[0], RAGService_QueryStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RAGServiceQueryStreamRequest, RAGServiceQueryStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RAGService_QueryStreamClient = grpc.ServerStreamingClient[RAGServiceQueryStreamResponse]

// RAGServiceServer is the server API for RAGService service.
// All implementations must embed UnimplementedRAGServiceServer
// for forward compatibility.
type RAGServiceServer interface {
	Query(context.Context, *RAGServiceQueryRequest) (*RAGServiceQueryResponse, error)
	QueryStream(*RAGServiceQueryStreamRequest, grpc.ServerStreamingServer[RAGServiceQueryStreamResponse]) error
	mustEmbedUnimplementedRAGServiceServer()
}

// UnimplementedRAGServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRAGServiceServer struct{}

func (UnimplementedRAGServiceServer) Query(context.Context, *RAGServiceQueryRequest) (*RAGServiceQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedRAGServiceServer) QueryStream(*RAGServiceQueryStreamRequest, grpc.ServerStreamingServer[RAGServiceQueryStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method QueryStream not implemented")
}
func (UnimplementedRAGServiceServer) mustEmbedUnimplementedRAGServiceServer() {}
func (UnimplementedRAGServiceServer) testEmbeddedByValue()                    {}

// UnsafeRAGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RAGServiceServer will
// result in compilation errors.
type UnsafeRAGServiceServer interface {
	mustEmbedUnimplementedRAGServiceServer()
}

func RegisterRAGServiceServer(s grpc.ServiceRegistrar, srv RAGServiceServer) {
	// If the following call pancis, it indicates UnimplementedRAGServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RAGService_ServiceDesc, srv)
}

func _RAGService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RAGServiceQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).Query(ctx, req.(*RAGServiceQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_QueryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RAGServiceQueryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RAGServiceServer).QueryStream(m, &grpc.GenericServerStream[RAGServiceQueryStreamRequest, RAGServiceQueryStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RAGService_QueryStreamServer = grpc.ServerStreamingServer[RAGServiceQueryStreamResponse]

// RAGService_ServiceDesc is the grpc.ServiceDesc for RAGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RAGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rag.v1.RAGService",
	HandlerType: (*RAGServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _RAGService_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryStream",
			Handler:       _RAGService_QueryStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rag/v1/rag.proto",
}
