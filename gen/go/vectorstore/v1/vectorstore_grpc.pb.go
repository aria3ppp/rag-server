// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: vectorstore/v1/vectorstore.proto

package vectorstorev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VectorStoreService_InsertTexts_FullMethodName = "/vectorstore.v1.VectorStoreService/InsertTexts"
	VectorStoreService_SearchText_FullMethodName  = "/vectorstore.v1.VectorStoreService/SearchText"
)

// VectorStoreServiceClient is the client API for VectorStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VectorStoreServiceClient interface {
	InsertTexts(ctx context.Context, in *VectorStoreServiceInsertTextsRequest, opts ...grpc.CallOption) (*VectorStoreServiceInsertTextsResponse, error)
	SearchText(ctx context.Context, in *VectorStoreServiceSearchTextRequest, opts ...grpc.CallOption) (*VectorStoreServiceSearchTextResponse, error)
}

type vectorStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorStoreServiceClient(cc grpc.ClientConnInterface) VectorStoreServiceClient {
	return &vectorStoreServiceClient{cc}
}

func (c *vectorStoreServiceClient) InsertTexts(ctx context.Context, in *VectorStoreServiceInsertTextsRequest, opts ...grpc.CallOption) (*VectorStoreServiceInsertTextsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VectorStoreServiceInsertTextsResponse)
	err := c.cc.Invoke(ctx, VectorStoreService_InsertTexts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorStoreServiceClient) SearchText(ctx context.Context, in *VectorStoreServiceSearchTextRequest, opts ...grpc.CallOption) (*VectorStoreServiceSearchTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VectorStoreServiceSearchTextResponse)
	err := c.cc.Invoke(ctx, VectorStoreService_SearchText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VectorStoreServiceServer is the server API for VectorStoreService service.
// All implementations must embed UnimplementedVectorStoreServiceServer
// for forward compatibility.
type VectorStoreServiceServer interface {
	InsertTexts(context.Context, *VectorStoreServiceInsertTextsRequest) (*VectorStoreServiceInsertTextsResponse, error)
	SearchText(context.Context, *VectorStoreServiceSearchTextRequest) (*VectorStoreServiceSearchTextResponse, error)
	mustEmbedUnimplementedVectorStoreServiceServer()
}

// UnimplementedVectorStoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVectorStoreServiceServer struct{}

func (UnimplementedVectorStoreServiceServer) InsertTexts(context.Context, *VectorStoreServiceInsertTextsRequest) (*VectorStoreServiceInsertTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTexts not implemented")
}
func (UnimplementedVectorStoreServiceServer) SearchText(context.Context, *VectorStoreServiceSearchTextRequest) (*VectorStoreServiceSearchTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchText not implemented")
}
func (UnimplementedVectorStoreServiceServer) mustEmbedUnimplementedVectorStoreServiceServer() {}
func (UnimplementedVectorStoreServiceServer) testEmbeddedByValue()                            {}

// UnsafeVectorStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VectorStoreServiceServer will
// result in compilation errors.
type UnsafeVectorStoreServiceServer interface {
	mustEmbedUnimplementedVectorStoreServiceServer()
}

func RegisterVectorStoreServiceServer(s grpc.ServiceRegistrar, srv VectorStoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedVectorStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VectorStoreService_ServiceDesc, srv)
}

func _VectorStoreService_InsertTexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorStoreServiceInsertTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).InsertTexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VectorStoreService_InsertTexts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).InsertTexts(ctx, req.(*VectorStoreServiceInsertTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorStoreService_SearchText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorStoreServiceSearchTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).SearchText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VectorStoreService_SearchText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).SearchText(ctx, req.(*VectorStoreServiceSearchTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VectorStoreService_ServiceDesc is the grpc.ServiceDesc for VectorStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VectorStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vectorstore.v1.VectorStoreService",
	HandlerType: (*VectorStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertTexts",
			Handler:    _VectorStoreService_InsertTexts_Handler,
		},
		{
			MethodName: "SearchText",
			Handler:    _VectorStoreService_SearchText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vectorstore/v1/vectorstore.proto",
}
